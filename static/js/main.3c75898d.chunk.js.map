{"version":3,"sources":["ReduxStore/ActionCreators/Actions.js","Navigation/TopNavBar/TopNavBar.js","Components/Post/PlaceHolder.js","Containers/MainPage/MainPage.js","Helper/LoaderSpinner.js","App.js","serviceWorker.js","ReduxStore/Reducers/MainReducer.js","index.js"],"names":["getDataSuccess","data","type","value","getDataCall","getDataFailure","err","TopNavBar","onSearchChangeHandler","event","props","setSearchString","target","onSearchClick","searchString","length","getSearchedData","alert","onBackClick","backButtonClicked","className","src","alt","onClick","this","title","placeholder","onChange","Component","connect","state","Title","dispatch","setSearchData","getSearchData","PlaceHolder","prevPage","LoadingIndicator","promiseInProgress","usePromiseTracker","console","log","style","width","height","display","justifyContent","alignItems","color","MainPage","post_tracker","onScrollHandler","currentTarget","innerHeight","scrollY","document","documentElement","offsetHeight","pageNo","loading","getPageData","loadPosts","array","map","ele","Post","React","lazy","fallback","key","name","img","window","addEventListener","posts","searching","Posts","searchedData","LoaderSpinner","pageno","trackPromise","axios","get","then","res","catch","getData","App","Boolean","location","hostname","match","initialState","error","MainReducer","action","parseInt","page","concat","content","searcheddata","filter","toLowerCase","includes","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3c75898d.chunk.js","sourcesContent":["// JavaScript source code\r\nimport axios from 'axios';\r\nimport { trackPromise } from 'react-promise-tracker';\r\n\r\nexport const getData = (pageno) => {\r\n   \r\n    return (dispatch) => {\r\n        trackPromise(axios.get('https://diagnal-api.herokuapp.com/pages/page' + pageno)\r\n            .then(res => {\r\n                //console.log(res);\r\n                dispatch(getDataCall());\r\n                dispatch(getDataSuccess(res.data));\r\n            })\r\n            .catch(err => {\r\n                dispatch(getDataFailure(err));\r\n            }));\r\n    }\r\n}\r\n\r\nconst getDataSuccess = (data) => {\r\n    //console.log(data);\r\n    return{\r\n        type: 'GET_DATA_SUCCESS',\r\n        value: data\r\n    }\r\n}\r\n\r\nconst getDataCall = () => {\r\n    return {\r\n        type: 'GET_DATA'\r\n    }\r\n}\r\n\r\nconst getDataFailure = (err) => {\r\n    return {\r\n        type: 'GET_DATA_FAILURE',\r\n        value: err\r\n    }\r\n}\r\n\r\n\r\nexport const setSearchData = (data) => {\r\n    return {\r\n        type: 'SET_SEARCH_DATA',\r\n        value: data\r\n    }\r\n}\r\n\r\nexport const getSearchData = (data) => {\r\n    return {\r\n        type: 'GET_SEARCH_DATA',\r\n        value: data\r\n    }\r\n}\r\n\r\nexport const setSearchingState = () => {\r\n    return {\r\n        type: 'SET_SEARCHING_STATE',\r\n    }\r\n}","// JavaScript source code\r\nimport React, { Component } from 'react';\r\nimport './TopNavBar.css';\r\nimport { setSearchData, getSearchData,setSearchingState } from '../../ReduxStore/ActionCreators/Actions';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\n\r\n\r\nclass TopNavBar extends Component {\r\n\r\n\r\n    onSearchChangeHandler = (event) => {\r\n        //console.log(event.target.value);\r\n        this.props.setSearchString(event.target.value);\r\n    }\r\n\r\n    onSearchClick = () => {\r\n        if (this.props.searchString.length > 2)\r\n            this.props.getSearchedData(this.props.searchString);\r\n        else\r\n            alert('Search String must be atleast 3 characters in length or use Back button to return to main page');\r\n    }\r\n\r\n    onBackClick = () => {\r\n        this.props.backButtonClicked();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"TopNavBar\" >\r\n\r\n                <img src={\"./Assets/NavBar/Back.png\"} className=\"Nav_back_img\" alt=\"Nav_back_img\" onClick={this.onBackClick} />\r\n                <h3 className=\"Nav_item1\">{this.props.title}</h3>\r\n                <input className=\"Nav_search\" placeholder=\"Search\" onChange={this.onSearchChangeHandler} />\r\n                <img src={\"./Assets/NavBar/search.png\"} className=\"Nav_item\" onClick={this.onSearchClick} alt=\"search\" />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchString: state.searchString,\r\n        title: state.Title\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSearchString: (data) => dispatch(setSearchData(data)),\r\n        getSearchedData: (data) => dispatch(getSearchData(data)),\r\n        backButtonClicked: () => dispatch(setSearchingState())\r\n    }\r\n}\r\n\r\n \r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TopNavBar);","// JavaScript source code\r\nimport React from 'react';\r\n\r\nfunction PlaceHolder() {\r\n\r\n    return (\r\n        <div className=\"Post\">\r\n            <img src={\"./Assets/Posters/placeholder_for_missing_posters.png\"} alt='not found'/>\r\n            \r\n        </div>\r\n        );\r\n}\r\n\r\nexport default PlaceHolder;","// JavaScript source code\r\nimport React, { Component, lazy, Suspense} from 'react';\r\nimport { getData } from '../../ReduxStore/ActionCreators/Actions';\r\nimport { connect } from 'react-redux';\r\nimport PlaceHolder from '../../Components/Post/PlaceHolder';\r\nimport './MainPage.css';\r\nimport LoaderSpinner from '../../Helper/LoaderSpinner';\r\n\r\nlet prevPage;\r\n\r\nclass MainPage extends Component {\r\n\r\n    post_tracker = 0;\r\n\r\n    componentDidMount() {\r\n\r\n        //make API Call to get First Page Data\r\n        this.props.getPageData(this.props.pageNo);\r\n        window.addEventListener('scroll', this.onScrollHandler);\r\n    }\r\n\r\n\r\n    onScrollHandler = (event) => {\r\n        //console.log(\"document-height\", document.documentElement.offsetHeight);\r\n        const { innerHeight, scrollY } = event.currentTarget;\r\n        \r\n\r\n        if ((document.documentElement.offsetHeight - scrollY) < (innerHeight + 300) && (this.props.pageNo < 3) && (this.props.loading === false) && (prevPage !== this.props.pageNo)) {\r\n            console.log('Loading Next Page number ' + (this.props.pageNo + 1));\r\n            prevPage = this.props.pageNo;\r\n            this.props.getPageData(this.props.pageNo+1);\r\n        }\r\n        \r\n    }\r\n\r\n    //method to load posts to listing page either searched data or data retrievedfrom API call \r\n    loadPosts = (array) => {\r\n        //if (array.length > 0) {\r\n\r\n            const posts = array.map(ele => {\r\n                //post_tracker variable to get unique id for each post\r\n                this.post_tracker++;\r\n\r\n                //lazily load the Post component\r\n                const Post = React.lazy(() => import('../../Components/Post/Post'));\r\n                return (\r\n\r\n\r\n                    <Suspense fallback={<PlaceHolder />} key={this.post_tracker}>\r\n                        <Post title={ele.name} img={ele['poster-image']}  />\r\n                    </Suspense>\r\n                );\r\n            })\r\n            return posts;\r\n        \r\n\r\n        ////check if no data is present\r\n        //else {\r\n        //    return <h4 style={{ textAlign:\"center\" }}>No Data Found!!</h4>\r\n        //}\r\n        \r\n    }\r\n\r\n    render() {\r\n        \r\n        //stores the posts to be displayed in listing page\r\n        const posts = this.props.searching === false ? this.loadPosts(this.props.Posts) : this.loadPosts(this.props.searchedData)\r\n\r\n        return (\r\n            <div>\r\n                \r\n                <div className=\"MainPage\">\r\n                    \r\n                    {posts}\r\n                    {this.props.searching === true && this.props.searchedData.length <= 0 ? <p>No Data Found!!</p>:null}\r\n                    <LoaderSpinner />\r\n                </div>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        pageNo: state.pageNo,\r\n        Posts: state.Posts,\r\n        searching: state.searching,\r\n        searchedData: state.searchedData,\r\n        loading: state.loading,\r\n        \r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getPageData: (pageno) => dispatch(getData(pageno))\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainPage);","// JavaScript source code\r\n// JavaScript source code\r\nimport React from 'react'\r\nimport Loader from 'react-loader-spinner';\r\nimport { usePromiseTracker } from \"react-promise-tracker\";\r\n\r\n\r\nconst LoadingIndicator = props => {\r\n    const { promiseInProgress } = usePromiseTracker();\r\n    console.log('Loading');\r\n    return promiseInProgress &&\r\n        <div\r\n            style={{\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n\r\n            }}\r\n        >\r\n\r\n            <Loader type=\"TailSpin\" color=\"black\" height=\"20%\" width=\"30%\" />\r\n        </div>\r\n};\r\n\r\nexport default LoadingIndicator;","import React from 'react';\nimport './App.css';\nimport TopNavBar from './Navigation/TopNavBar/TopNavBar';\nimport MainPage from './Containers/MainPage/MainPage';\n\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n      \n          <TopNavBar />\n          <MainPage />\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// JavaScript source code\r\n\r\nconst initialState = {\r\n    pageNo: 1,\r\n    Title:'',\r\n    Posts: [],\r\n    error: '',\r\n    loading: false,\r\n    searchString: '',\r\n    searchedData: [],\r\n    searching: false\r\n    \r\n};\r\n\r\nfunction MainReducer(state=initialState,action) {\r\n    switch (action.type) {\r\n        //loading data page wise \r\n        case 'GET_DATA':\r\n            {\r\n\r\n               \r\n                return {\r\n                    ...state,\r\n                    //loading: true\r\n                    \r\n                }\r\n                \r\n            }\r\n        case 'GET_DATA_SUCCESS':\r\n            {\r\n\r\n                //console.log(parseInt(action.value.page['page-num-requested'],10));\r\n                return {\r\n                    ...state,\r\n                    //converting page number toint to keeprack of which page is called\r\n                    pageNo: parseInt(action.value.page['page-num-requested'], 10),\r\n                    Title: action.value.page.title,\r\n                    Posts: state.Posts.concat(action.value.page['content-items'].content),\r\n                    //loading: true\r\n                }\r\n\r\n            }\r\n\r\n            //if API call fails we log error data\r\n        case 'GET_DATA_FAILURE':\r\n            {\r\n                console.log(action.value);\r\n                return {\r\n                    ...state,\r\n                    Title: null,\r\n                    Posts: null,\r\n                    error: action.value\r\n                }\r\n                \r\n            }\r\n\r\n            //setting the search string into the store\r\n        case 'SET_SEARCH_DATA':\r\n            {\r\n                //console.log(action.value);\r\n                return {\r\n                    ...state,\r\n                    searchString:action.value\r\n                }\r\n\r\n            }\r\n\r\n            //retrieve searched data from the store\r\n        case 'GET_SEARCH_DATA':\r\n            {\r\n                //console.log(action.value);\r\n                let searchString = state.searchString;\r\n                const searcheddata = state.Posts.filter(ele => {\r\n                    if (ele.name.toLowerCase().includes(searchString.toLowerCase())) {\r\n                        return ele;\r\n                    }\r\n                    else\r\n                        return null;\r\n                })\r\n                console.log(searcheddata);\r\n                \r\n                return {\r\n                    ...state,\r\n                    searching: true,\r\n                    searchedData: searcheddata,\r\n                    \r\n                    }\r\n               \r\n            }\r\n\r\n            //set the searching state back to false when backbutton is pressed \r\n        case 'SET_SEARCHING_STATE':\r\n            {\r\n                //console.log(action.value);\r\n                return {\r\n                    ...state,\r\n                    searching: false\r\n                }\r\n\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default MainReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore,applyMiddleware } from 'redux';\nimport MainReducer from './ReduxStore/Reducers/MainReducer'\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(MainReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}